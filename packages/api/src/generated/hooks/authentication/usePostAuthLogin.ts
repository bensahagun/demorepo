/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client/apiClient.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/apiClient.ts'
import type { PostAuthLoginMutationRequest, PostAuthLoginMutationResponse, PostAuthLogin401 } from '../../types/authentication/PostAuthLogin.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { postAuthLogin } from '../../client/postAuthLogin.ts'
import { useMutation } from '@tanstack/react-query'

export const postAuthLoginMutationKey = () => [{ url: '/auth/login' }] as const

export type PostAuthLoginMutationKey = ReturnType<typeof postAuthLoginMutationKey>

/**
 * @summary User login
 * {@link /auth/login}
 */
export function usePostAuthLogin<TContext>(
  options: {
    mutation?: UseMutationOptions<PostAuthLoginMutationResponse, ResponseErrorConfig<PostAuthLogin401>, { data: PostAuthLoginMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostAuthLoginMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postAuthLoginMutationKey()

  return useMutation<PostAuthLoginMutationResponse, ResponseErrorConfig<PostAuthLogin401>, { data: PostAuthLoginMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postAuthLogin(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}