/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client/apiClient.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/apiClient.ts'
import type { GetProductsQueryResponse, GetProductsQueryParams } from '../../types/products/GetProducts.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getProducts } from '../../client/getProducts.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getProductsQueryKey = (params?: GetProductsQueryParams) => [{ url: '/products' }, ...(params ? [params] : [])] as const

export type GetProductsQueryKey = ReturnType<typeof getProductsQueryKey>

export function getProductsQueryOptions(params?: GetProductsQueryParams, config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getProductsQueryKey(params)
  return queryOptions<GetProductsQueryResponse, ResponseErrorConfig<Error>, GetProductsQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getProducts(params, config)
    },
  })
}

/**
 * @summary List products
 * {@link /products}
 */
export function useGetProducts<TData = GetProductsQueryResponse, TQueryData = GetProductsQueryResponse, TQueryKey extends QueryKey = GetProductsQueryKey>(
  params?: GetProductsQueryParams,
  options: {
    query?: Partial<QueryObserverOptions<GetProductsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getProductsQueryKey(params)

  const query = useQuery(
    {
      ...(getProductsQueryOptions(params, config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}