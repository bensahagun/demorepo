/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client/apiClient.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/apiClient.ts'
import type { PostProductsMutationRequest, PostProductsMutationResponse } from '../../types/products/PostProducts.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { postProducts } from '../../client/postProducts.ts'
import { useMutation } from '@tanstack/react-query'

export const postProductsMutationKey = () => [{ url: '/products' }] as const

export type PostProductsMutationKey = ReturnType<typeof postProductsMutationKey>

/**
 * @summary Create product
 * {@link /products}
 */
export function usePostProducts<TContext>(
  options: {
    mutation?: UseMutationOptions<PostProductsMutationResponse, ResponseErrorConfig<Error>, { data: PostProductsMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PostProductsMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postProductsMutationKey()

  return useMutation<PostProductsMutationResponse, ResponseErrorConfig<Error>, { data: PostProductsMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return postProducts(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}