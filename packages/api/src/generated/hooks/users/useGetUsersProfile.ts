/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client/apiClient.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/apiClient.ts'
import type { GetUsersProfileQueryResponse } from '../../types/users/GetUsersProfile.ts'
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from '@tanstack/react-query'
import { getUsersProfile } from '../../client/getUsersProfile.ts'
import { queryOptions, useQuery } from '@tanstack/react-query'

export const getUsersProfileQueryKey = () => [{ url: '/users/profile' }] as const

export type GetUsersProfileQueryKey = ReturnType<typeof getUsersProfileQueryKey>

export function getUsersProfileQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getUsersProfileQueryKey()
  return queryOptions<GetUsersProfileQueryResponse, ResponseErrorConfig<Error>, GetUsersProfileQueryResponse, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getUsersProfile(config)
    },
  })
}

/**
 * @summary Get user profile
 * {@link /users/profile}
 */
export function useGetUsersProfile<
  TData = GetUsersProfileQueryResponse,
  TQueryData = GetUsersProfileQueryResponse,
  TQueryKey extends QueryKey = GetUsersProfileQueryKey,
>(
  options: {
    query?: Partial<QueryObserverOptions<GetUsersProfileQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getUsersProfileQueryKey()

  const query = useQuery(
    {
      ...(getUsersProfileQueryOptions(config) as unknown as QueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<QueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}