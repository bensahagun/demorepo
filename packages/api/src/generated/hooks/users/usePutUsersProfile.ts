/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '../../../client/apiClient.ts'
import type { RequestConfig, ResponseErrorConfig } from '../../../client/apiClient.ts'
import type { PutUsersProfileMutationRequest, PutUsersProfileMutationResponse } from '../../types/users/PutUsersProfile.ts'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import { putUsersProfile } from '../../client/putUsersProfile.ts'
import { useMutation } from '@tanstack/react-query'

export const putUsersProfileMutationKey = () => [{ url: '/users/profile' }] as const

export type PutUsersProfileMutationKey = ReturnType<typeof putUsersProfileMutationKey>

/**
 * @summary Update user profile
 * {@link /users/profile}
 */
export function usePutUsersProfile<TContext>(
  options: {
    mutation?: UseMutationOptions<PutUsersProfileMutationResponse, ResponseErrorConfig<Error>, { data?: PutUsersProfileMutationRequest }, TContext> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig<PutUsersProfileMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? putUsersProfileMutationKey()

  return useMutation<PutUsersProfileMutationResponse, ResponseErrorConfig<Error>, { data?: PutUsersProfileMutationRequest }, TContext>(
    {
      mutationFn: async ({ data }) => {
        return putUsersProfile(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}